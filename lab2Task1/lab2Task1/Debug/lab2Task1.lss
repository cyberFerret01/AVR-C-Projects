
lab2Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070e  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000676  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bb  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  000015d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	
	DDRB = 0x20;
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
		_delay_ms(1000);
		PORTB &= ~(1<<5);
		_delay_ms(1000);
    }
	*/
 DDRD|=(1<<2)|(1<<3);
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	8c 60       	ori	r24, 0x0C	; 12
  88:	8a b9       	out	0x0a, r24	; 10
 PORTD=0x08;//OCR0A PWM, set PortD.6 output
  8a:	88 e0       	ldi	r24, 0x08	; 8
  8c:	8b b9       	out	0x0b, r24	; 11
 DDRD|=(1<<6);//set OCR0A PWM, fast PWM, no prescaler, non-inverted
  8e:	56 9a       	sbi	0x0a, 6	; 10
 
 TCCR0A=0x83;
  90:	83 e8       	ldi	r24, 0x83	; 131
  92:	84 bd       	out	0x24, r24	; 36

int buttonState = 0;	
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
		 break;
		 
		 case 1:
		 //25
		 //63 -3f
		 OCR0A=0x3f;
  98:	5f e3       	ldi	r21, 0x3F	; 63
		 break;
		 
		 case 2:
		 //62.5
		 //159 - 9f
		 OCR0A=0x9f;
  9a:	4f e9       	ldi	r20, 0x9F	; 159
		 break;
		 
		 case 3:
		 //87.5
		 //223 - df
		 OCR0A=0xdf;
  9c:	3f ed       	ldi	r19, 0xDF	; 223
		 
		 break;
	 }
	 TCCR0B=0b101;
  9e:	25 e0       	ldi	r18, 0x05	; 5

int buttonState = 0;	

 while(1){
	 
	 switch(buttonState){
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	91 05       	cpc	r25, r1
  a4:	71 f0       	breq	.+28     	; 0xc2 <main+0x42>
  a6:	1c f4       	brge	.+6      	; 0xae <main+0x2e>
  a8:	00 97       	sbiw	r24, 0x00	; 0
  aa:	41 f0       	breq	.+16     	; 0xbc <main+0x3c>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <main+0x4c>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	91 05       	cpc	r25, r1
  b2:	49 f0       	breq	.+18     	; 0xc6 <main+0x46>
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	91 05       	cpc	r25, r1
  b8:	41 f0       	breq	.+16     	; 0xca <main+0x4a>
  ba:	08 c0       	rjmp	.+16     	; 0xcc <main+0x4c>
		 case 0:
		 //0
		 //0
		 OCR0A=0x00;
  bc:	17 bc       	out	0x27, r1	; 39
		 PORTB |= (1<<5);
  be:	2d 9a       	sbi	0x05, 5	; 5
		 break;
  c0:	05 c0       	rjmp	.+10     	; 0xcc <main+0x4c>
		 
		 case 1:
		 //25
		 //63 -3f
		 OCR0A=0x3f;
  c2:	57 bd       	out	0x27, r21	; 39
		 break;
  c4:	03 c0       	rjmp	.+6      	; 0xcc <main+0x4c>
		 
		 case 2:
		 //62.5
		 //159 - 9f
		 OCR0A=0x9f;
  c6:	47 bd       	out	0x27, r20	; 39
		 break;
  c8:	01 c0       	rjmp	.+2      	; 0xcc <main+0x4c>
		 
		 case 3:
		 //87.5
		 //223 - df
		 OCR0A=0xdf;
  ca:	37 bd       	out	0x27, r19	; 39
		 
		 break;
	 }
	 TCCR0B=0b101;
  cc:	25 bd       	out	0x25, r18	; 37
	 
	 buttonState++;
  ce:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	6f ef       	ldi	r22, 0xFF	; 255
  d2:	77 ea       	ldi	r23, 0xA7	; 167
  d4:	e1 e6       	ldi	r30, 0x61	; 97
  d6:	61 50       	subi	r22, 0x01	; 1
  d8:	70 40       	sbci	r23, 0x00	; 0
  da:	e0 40       	sbci	r30, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x56>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x60>
  e0:	00 00       	nop
  e2:	de cf       	rjmp	.-68     	; 0xa0 <main+0x20>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
