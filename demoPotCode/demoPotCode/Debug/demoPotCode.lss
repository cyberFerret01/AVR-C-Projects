
demoPotCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e7  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000642  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000238  00000000  00000000  00000ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001124  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
#include<avr/io.h>
void initADC(void){
	ADMUX|=(1<<REFS0);//|(1<<MUX0);//reference voltage on AVCC, and use ADC1
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADPS1)|(1<<ADPS0);//ADC clock prescaler/ 8
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	83 60       	ori	r24, 0x03	; 3
  92:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN);//enables the ADC
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <main>:
	}
	int main(){
		uint16_t potentiometerValue;
		uint16_t threshold_level;
		DDRB|=(1<< 5);//Data Direction Register B: writing a 1 to the bit enables output
  9c:	25 9a       	sbi	0x04, 5	; 4
		threshold_level=0b11100000;
		initADC();
  9e:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
		while(1){ADCSRA|=(1<<ADSC);//start ADC conversion
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
			while((ADCSRA&(1<<ADSC)))//wait until ADSC bit is clear, i.e., ADC conversion is done
			{} //read ADC value in
				uint8_t theLowADC=ADCL;
  a6:	c8 e7       	ldi	r28, 0x78	; 120
  a8:	d0 e0       	ldi	r29, 0x00	; 0
				potentiometerValue=ADCH << 8|theLowADC;
  aa:	a9 e7       	ldi	r26, 0x79	; 121
  ac:	b0 e0       	ldi	r27, 0x00	; 0
		uint16_t potentiometerValue;
		uint16_t threshold_level;
		DDRB|=(1<< 5);//Data Direction Register B: writing a 1 to the bit enables output
		threshold_level=0b11100000;
		initADC();
		while(1){ADCSRA|=(1<<ADSC);//start ADC conversion
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
			while((ADCSRA&(1<<ADSC)))//wait until ADSC bit is clear, i.e., ADC conversion is done
  b4:	80 81       	ld	r24, Z
  b6:	86 fd       	sbrc	r24, 6
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0x18>
			{} //read ADC value in
				uint8_t theLowADC=ADCL;
  ba:	88 81       	ld	r24, Y
				potentiometerValue=ADCH << 8|theLowADC;
  bc:	2c 91       	ld	r18, X
				// potentiometerValue= ADC;
				if(potentiometerValue>threshold_level){
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	92 2b       	or	r25, r18
  c2:	81 3e       	cpi	r24, 0xE1	; 225
  c4:	91 05       	cpc	r25, r1
  c6:	10 f0       	brcs	.+4      	; 0xcc <main+0x30>
					PORTB|=(1<< 5);;//turn on LED attached to port PB2
  c8:	2d 9a       	sbi	0x05, 5	; 5
  ca:	f1 cf       	rjmp	.-30     	; 0xae <main+0x12>
					 }else{PORTB&=~(1<< 5);;//turn off LED attached to port PB2 
  cc:	2d 98       	cbi	0x05, 5	; 5
  ce:	ef cf       	rjmp	.-34     	; 0xae <main+0x12>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
