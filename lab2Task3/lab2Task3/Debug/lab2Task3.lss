
lab2Task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ec  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ec  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void){
	DDRB = 0b10;
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	84 b9       	out	0x04, r24	; 4
	TCCR1A =0x82;
  84:	82 e8       	ldi	r24, 0x82	; 130
  86:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B =0x1A;
  8a:	8a e1       	ldi	r24, 0x1A	; 26
  8c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	ICR1=40000;
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	9c e9       	ldi	r25, 0x9C	; 156
  94:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  98:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	while(1){
		
		
	
		_delay_ms(1000);
				OCR1A=1100; // -90 //offset from 999 as motor buzzed at 999
  9c:	e8 e8       	ldi	r30, 0x88	; 136
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	ac e4       	ldi	r26, 0x4C	; 76
  a2:	b4 e0       	ldi	r27, 0x04	; 4
		_delay_ms(1000);
				OCR1A=2000; // -45
  a4:	60 ed       	ldi	r22, 0xD0	; 208
  a6:	77 e0       	ldi	r23, 0x07	; 7
		_delay_ms(1000);
				OCR1A=3000; // 0
  a8:	48 eb       	ldi	r20, 0xB8	; 184
  aa:	5b e0       	ldi	r21, 0x0B	; 11
		_delay_ms(1000);
				OCR1A=4000; // 45
  ac:	20 ea       	ldi	r18, 0xA0	; 160
  ae:	3f e0       	ldi	r19, 0x0F	; 15
		_delay_ms(1000);
				OCR1A=5000; //90
  b0:	88 e8       	ldi	r24, 0x88	; 136
  b2:	93 e1       	ldi	r25, 0x13	; 19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	1f ef       	ldi	r17, 0xFF	; 255
  b6:	c3 ed       	ldi	r28, 0xD3	; 211
  b8:	d0 e3       	ldi	r29, 0x30	; 48
  ba:	11 50       	subi	r17, 0x01	; 1
  bc:	c0 40       	sbci	r28, 0x00	; 0
  be:	d0 40       	sbci	r29, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x3a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x44>
  c4:	00 00       	nop
	while(1){
		
		
	
		_delay_ms(1000);
				OCR1A=1100; // -90 //offset from 999 as motor buzzed at 999
  c6:	b1 83       	std	Z+1, r27	; 0x01
  c8:	a0 83       	st	Z, r26
  ca:	1f ef       	ldi	r17, 0xFF	; 255
  cc:	c3 ed       	ldi	r28, 0xD3	; 211
  ce:	d0 e3       	ldi	r29, 0x30	; 48
  d0:	11 50       	subi	r17, 0x01	; 1
  d2:	c0 40       	sbci	r28, 0x00	; 0
  d4:	d0 40       	sbci	r29, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x50>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x5a>
  da:	00 00       	nop
		_delay_ms(1000);
				OCR1A=2000; // -45
  dc:	71 83       	std	Z+1, r23	; 0x01
  de:	60 83       	st	Z, r22
  e0:	1f ef       	ldi	r17, 0xFF	; 255
  e2:	c3 ed       	ldi	r28, 0xD3	; 211
  e4:	d0 e3       	ldi	r29, 0x30	; 48
  e6:	11 50       	subi	r17, 0x01	; 1
  e8:	c0 40       	sbci	r28, 0x00	; 0
  ea:	d0 40       	sbci	r29, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x66>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x70>
  f0:	00 00       	nop
		_delay_ms(1000);
				OCR1A=3000; // 0
  f2:	51 83       	std	Z+1, r21	; 0x01
  f4:	40 83       	st	Z, r20
  f6:	1f ef       	ldi	r17, 0xFF	; 255
  f8:	c3 ed       	ldi	r28, 0xD3	; 211
  fa:	d0 e3       	ldi	r29, 0x30	; 48
  fc:	11 50       	subi	r17, 0x01	; 1
  fe:	c0 40       	sbci	r28, 0x00	; 0
 100:	d0 40       	sbci	r29, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x7c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x86>
 106:	00 00       	nop
		_delay_ms(1000);
				OCR1A=4000; // 45
 108:	31 83       	std	Z+1, r19	; 0x01
 10a:	20 83       	st	Z, r18
 10c:	1f ef       	ldi	r17, 0xFF	; 255
 10e:	c3 ed       	ldi	r28, 0xD3	; 211
 110:	d0 e3       	ldi	r29, 0x30	; 48
 112:	11 50       	subi	r17, 0x01	; 1
 114:	c0 40       	sbci	r28, 0x00	; 0
 116:	d0 40       	sbci	r29, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x92>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x9c>
 11c:	00 00       	nop
		_delay_ms(1000);
				OCR1A=5000; //90
 11e:	91 83       	std	Z+1, r25	; 0x01
 120:	80 83       	st	Z, r24
 122:	c8 cf       	rjmp	.-112    	; 0xb4 <main+0x34>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
