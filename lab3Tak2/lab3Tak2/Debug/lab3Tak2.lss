
lab3Tak2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000183f  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081b  00000000  00000000  00001f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a74  00000000  00000000  0000277e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  000031f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fe  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d4c  00000000  00000000  00003922  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000466e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 02 	call	0x4be	; 0x4be <main>
  78:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pinChange>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
  80:	67 2b       	or	r22, r23
  82:	09 f0       	breq	.+2      	; 0x86 <pinChange+0x6>
  84:	73 c0       	rjmp	.+230    	; 0x16c <pinChange+0xec>
  86:	8a 30       	cpi	r24, 0x0A	; 10
  88:	91 05       	cpc	r25, r1
  8a:	11 f4       	brne	.+4      	; 0x90 <pinChange+0x10>
  8c:	28 98       	cbi	0x05, 0	; 5
  8e:	08 95       	ret
  90:	8b 30       	cpi	r24, 0x0B	; 11
  92:	91 05       	cpc	r25, r1
  94:	11 f4       	brne	.+4      	; 0x9a <pinChange+0x1a>
  96:	29 98       	cbi	0x05, 1	; 5
  98:	08 95       	ret
  9a:	8c 30       	cpi	r24, 0x0C	; 12
  9c:	91 05       	cpc	r25, r1
  9e:	11 f4       	brne	.+4      	; 0xa4 <pinChange+0x24>
  a0:	2a 98       	cbi	0x05, 2	; 5
  a2:	08 95       	ret
  a4:	8d 30       	cpi	r24, 0x0D	; 13
  a6:	91 05       	cpc	r25, r1
  a8:	11 f4       	brne	.+4      	; 0xae <pinChange+0x2e>
  aa:	2b 98       	cbi	0x05, 3	; 5
  ac:	08 95       	ret
  ae:	8e 30       	cpi	r24, 0x0E	; 14
  b0:	91 05       	cpc	r25, r1
  b2:	11 f4       	brne	.+4      	; 0xb8 <pinChange+0x38>
  b4:	2c 98       	cbi	0x05, 4	; 5
  b6:	08 95       	ret
  b8:	8f 30       	cpi	r24, 0x0F	; 15
  ba:	91 05       	cpc	r25, r1
  bc:	11 f4       	brne	.+4      	; 0xc2 <pinChange+0x42>
  be:	2d 98       	cbi	0x05, 5	; 5
  c0:	08 95       	ret
  c2:	80 31       	cpi	r24, 0x10	; 16
  c4:	91 05       	cpc	r25, r1
  c6:	11 f4       	brne	.+4      	; 0xcc <pinChange+0x4c>
  c8:	2e 98       	cbi	0x05, 6	; 5
  ca:	08 95       	ret
  cc:	81 31       	cpi	r24, 0x11	; 17
  ce:	91 05       	cpc	r25, r1
  d0:	11 f4       	brne	.+4      	; 0xd6 <pinChange+0x56>
  d2:	2f 98       	cbi	0x05, 7	; 5
  d4:	08 95       	ret
  d6:	84 31       	cpi	r24, 0x14	; 20
  d8:	91 05       	cpc	r25, r1
  da:	11 f4       	brne	.+4      	; 0xe0 <pinChange+0x60>
  dc:	40 98       	cbi	0x08, 0	; 8
  de:	08 95       	ret
  e0:	85 31       	cpi	r24, 0x15	; 21
  e2:	91 05       	cpc	r25, r1
  e4:	11 f4       	brne	.+4      	; 0xea <pinChange+0x6a>
  e6:	41 98       	cbi	0x08, 1	; 8
  e8:	08 95       	ret
  ea:	86 31       	cpi	r24, 0x16	; 22
  ec:	91 05       	cpc	r25, r1
  ee:	11 f4       	brne	.+4      	; 0xf4 <pinChange+0x74>
  f0:	42 98       	cbi	0x08, 2	; 8
  f2:	08 95       	ret
  f4:	87 31       	cpi	r24, 0x17	; 23
  f6:	91 05       	cpc	r25, r1
  f8:	11 f4       	brne	.+4      	; 0xfe <pinChange+0x7e>
  fa:	43 98       	cbi	0x08, 3	; 8
  fc:	08 95       	ret
  fe:	88 31       	cpi	r24, 0x18	; 24
 100:	91 05       	cpc	r25, r1
 102:	11 f4       	brne	.+4      	; 0x108 <pinChange+0x88>
 104:	44 98       	cbi	0x08, 4	; 8
 106:	08 95       	ret
 108:	89 31       	cpi	r24, 0x19	; 25
 10a:	91 05       	cpc	r25, r1
 10c:	11 f4       	brne	.+4      	; 0x112 <pinChange+0x92>
 10e:	45 98       	cbi	0x08, 5	; 8
 110:	08 95       	ret
 112:	8a 31       	cpi	r24, 0x1A	; 26
 114:	91 05       	cpc	r25, r1
 116:	11 f4       	brne	.+4      	; 0x11c <pinChange+0x9c>
 118:	46 98       	cbi	0x08, 6	; 8
 11a:	08 95       	ret
 11c:	8e 31       	cpi	r24, 0x1E	; 30
 11e:	91 05       	cpc	r25, r1
 120:	11 f4       	brne	.+4      	; 0x126 <pinChange+0xa6>
 122:	58 98       	cbi	0x0b, 0	; 11
 124:	08 95       	ret
 126:	8f 31       	cpi	r24, 0x1F	; 31
 128:	91 05       	cpc	r25, r1
 12a:	11 f4       	brne	.+4      	; 0x130 <pinChange+0xb0>
 12c:	59 98       	cbi	0x0b, 1	; 11
 12e:	08 95       	ret
 130:	80 32       	cpi	r24, 0x20	; 32
 132:	91 05       	cpc	r25, r1
 134:	11 f4       	brne	.+4      	; 0x13a <pinChange+0xba>
 136:	5a 98       	cbi	0x0b, 2	; 11
 138:	08 95       	ret
 13a:	81 32       	cpi	r24, 0x21	; 33
 13c:	91 05       	cpc	r25, r1
 13e:	11 f4       	brne	.+4      	; 0x144 <pinChange+0xc4>
 140:	5b 98       	cbi	0x0b, 3	; 11
 142:	08 95       	ret
 144:	82 32       	cpi	r24, 0x22	; 34
 146:	91 05       	cpc	r25, r1
 148:	11 f4       	brne	.+4      	; 0x14e <pinChange+0xce>
 14a:	5c 98       	cbi	0x0b, 4	; 11
 14c:	08 95       	ret
 14e:	83 32       	cpi	r24, 0x23	; 35
 150:	91 05       	cpc	r25, r1
 152:	11 f4       	brne	.+4      	; 0x158 <pinChange+0xd8>
 154:	5d 98       	cbi	0x0b, 5	; 11
 156:	08 95       	ret
 158:	84 32       	cpi	r24, 0x24	; 36
 15a:	91 05       	cpc	r25, r1
 15c:	11 f4       	brne	.+4      	; 0x162 <pinChange+0xe2>
 15e:	5e 98       	cbi	0x0b, 6	; 11
 160:	08 95       	ret
 162:	85 97       	sbiw	r24, 0x25	; 37
 164:	09 f0       	breq	.+2      	; 0x168 <pinChange+0xe8>
 166:	73 c0       	rjmp	.+230    	; 0x24e <pinChange+0x1ce>
 168:	5f 98       	cbi	0x0b, 7	; 11
 16a:	08 95       	ret
 16c:	8a 30       	cpi	r24, 0x0A	; 10
 16e:	91 05       	cpc	r25, r1
 170:	11 f4       	brne	.+4      	; 0x176 <pinChange+0xf6>
 172:	28 9a       	sbi	0x05, 0	; 5
 174:	08 95       	ret
 176:	8b 30       	cpi	r24, 0x0B	; 11
 178:	91 05       	cpc	r25, r1
 17a:	11 f4       	brne	.+4      	; 0x180 <pinChange+0x100>
 17c:	29 9a       	sbi	0x05, 1	; 5
 17e:	08 95       	ret
 180:	8c 30       	cpi	r24, 0x0C	; 12
 182:	91 05       	cpc	r25, r1
 184:	11 f4       	brne	.+4      	; 0x18a <pinChange+0x10a>
 186:	2a 9a       	sbi	0x05, 2	; 5
 188:	08 95       	ret
 18a:	8d 30       	cpi	r24, 0x0D	; 13
 18c:	91 05       	cpc	r25, r1
 18e:	11 f4       	brne	.+4      	; 0x194 <pinChange+0x114>
 190:	2b 9a       	sbi	0x05, 3	; 5
 192:	08 95       	ret
 194:	8e 30       	cpi	r24, 0x0E	; 14
 196:	91 05       	cpc	r25, r1
 198:	11 f4       	brne	.+4      	; 0x19e <pinChange+0x11e>
 19a:	2c 9a       	sbi	0x05, 4	; 5
 19c:	08 95       	ret
 19e:	8f 30       	cpi	r24, 0x0F	; 15
 1a0:	91 05       	cpc	r25, r1
 1a2:	11 f4       	brne	.+4      	; 0x1a8 <pinChange+0x128>
 1a4:	2d 9a       	sbi	0x05, 5	; 5
 1a6:	08 95       	ret
 1a8:	80 31       	cpi	r24, 0x10	; 16
 1aa:	91 05       	cpc	r25, r1
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <pinChange+0x132>
 1ae:	2e 9a       	sbi	0x05, 6	; 5
 1b0:	08 95       	ret
 1b2:	81 31       	cpi	r24, 0x11	; 17
 1b4:	91 05       	cpc	r25, r1
 1b6:	11 f4       	brne	.+4      	; 0x1bc <pinChange+0x13c>
 1b8:	2f 9a       	sbi	0x05, 7	; 5
 1ba:	08 95       	ret
 1bc:	84 31       	cpi	r24, 0x14	; 20
 1be:	91 05       	cpc	r25, r1
 1c0:	11 f4       	brne	.+4      	; 0x1c6 <pinChange+0x146>
 1c2:	40 9a       	sbi	0x08, 0	; 8
 1c4:	08 95       	ret
 1c6:	85 31       	cpi	r24, 0x15	; 21
 1c8:	91 05       	cpc	r25, r1
 1ca:	11 f4       	brne	.+4      	; 0x1d0 <pinChange+0x150>
 1cc:	41 9a       	sbi	0x08, 1	; 8
 1ce:	08 95       	ret
 1d0:	86 31       	cpi	r24, 0x16	; 22
 1d2:	91 05       	cpc	r25, r1
 1d4:	11 f4       	brne	.+4      	; 0x1da <pinChange+0x15a>
 1d6:	42 9a       	sbi	0x08, 2	; 8
 1d8:	08 95       	ret
 1da:	87 31       	cpi	r24, 0x17	; 23
 1dc:	91 05       	cpc	r25, r1
 1de:	11 f4       	brne	.+4      	; 0x1e4 <pinChange+0x164>
 1e0:	43 9a       	sbi	0x08, 3	; 8
 1e2:	08 95       	ret
 1e4:	88 31       	cpi	r24, 0x18	; 24
 1e6:	91 05       	cpc	r25, r1
 1e8:	11 f4       	brne	.+4      	; 0x1ee <pinChange+0x16e>
 1ea:	44 9a       	sbi	0x08, 4	; 8
 1ec:	08 95       	ret
 1ee:	89 31       	cpi	r24, 0x19	; 25
 1f0:	91 05       	cpc	r25, r1
 1f2:	11 f4       	brne	.+4      	; 0x1f8 <pinChange+0x178>
 1f4:	45 9a       	sbi	0x08, 5	; 8
 1f6:	08 95       	ret
 1f8:	8a 31       	cpi	r24, 0x1A	; 26
 1fa:	91 05       	cpc	r25, r1
 1fc:	11 f4       	brne	.+4      	; 0x202 <pinChange+0x182>
 1fe:	46 9a       	sbi	0x08, 6	; 8
 200:	08 95       	ret
 202:	8e 31       	cpi	r24, 0x1E	; 30
 204:	91 05       	cpc	r25, r1
 206:	11 f4       	brne	.+4      	; 0x20c <pinChange+0x18c>
 208:	58 9a       	sbi	0x0b, 0	; 11
 20a:	08 95       	ret
 20c:	8f 31       	cpi	r24, 0x1F	; 31
 20e:	91 05       	cpc	r25, r1
 210:	11 f4       	brne	.+4      	; 0x216 <pinChange+0x196>
 212:	59 9a       	sbi	0x0b, 1	; 11
 214:	08 95       	ret
 216:	80 32       	cpi	r24, 0x20	; 32
 218:	91 05       	cpc	r25, r1
 21a:	11 f4       	brne	.+4      	; 0x220 <pinChange+0x1a0>
 21c:	5a 9a       	sbi	0x0b, 2	; 11
 21e:	08 95       	ret
 220:	81 32       	cpi	r24, 0x21	; 33
 222:	91 05       	cpc	r25, r1
 224:	11 f4       	brne	.+4      	; 0x22a <pinChange+0x1aa>
 226:	5b 9a       	sbi	0x0b, 3	; 11
 228:	08 95       	ret
 22a:	82 32       	cpi	r24, 0x22	; 34
 22c:	91 05       	cpc	r25, r1
 22e:	11 f4       	brne	.+4      	; 0x234 <pinChange+0x1b4>
 230:	5c 9a       	sbi	0x0b, 4	; 11
 232:	08 95       	ret
 234:	83 32       	cpi	r24, 0x23	; 35
 236:	91 05       	cpc	r25, r1
 238:	11 f4       	brne	.+4      	; 0x23e <pinChange+0x1be>
 23a:	5d 9a       	sbi	0x0b, 5	; 11
 23c:	08 95       	ret
 23e:	84 32       	cpi	r24, 0x24	; 36
 240:	91 05       	cpc	r25, r1
 242:	11 f4       	brne	.+4      	; 0x248 <pinChange+0x1c8>
 244:	5e 9a       	sbi	0x0b, 6	; 11
 246:	08 95       	ret
 248:	85 97       	sbiw	r24, 0x25	; 37
 24a:	09 f4       	brne	.+2      	; 0x24e <pinChange+0x1ce>
 24c:	5f 9a       	sbi	0x0b, 7	; 11
 24e:	08 95       	ret

00000250 <Lcd4_Port>:
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
 254:	80 ff       	sbrs	r24, 0
 256:	07 c0       	rjmp	.+14     	; 0x266 <Lcd4_Port+0x16>
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	82 e2       	ldi	r24, 0x22	; 34
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 264:	06 c0       	rjmp	.+12     	; 0x272 <Lcd4_Port+0x22>
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	82 e2       	ldi	r24, 0x22	; 34
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 272:	c1 ff       	sbrs	r28, 1
 274:	07 c0       	rjmp	.+14     	; 0x284 <Lcd4_Port+0x34>
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	83 e2       	ldi	r24, 0x23	; 35
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 282:	06 c0       	rjmp	.+12     	; 0x290 <Lcd4_Port+0x40>
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	83 e2       	ldi	r24, 0x23	; 35
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 290:	c2 ff       	sbrs	r28, 2
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <Lcd4_Port+0x52>
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	84 e2       	ldi	r24, 0x24	; 36
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <Lcd4_Port+0x5e>
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	84 e2       	ldi	r24, 0x24	; 36
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 2ae:	c3 ff       	sbrs	r28, 3
 2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <Lcd4_Port+0x70>
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	85 e2       	ldi	r24, 0x25	; 37
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 2be:	06 c0       	rjmp	.+12     	; 0x2cc <Lcd4_Port+0x7c>
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	85 e2       	ldi	r24, 0x25	; 37
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <Lcd4_Cmd>:
 2d0:	cf 93       	push	r28
 2d2:	c8 2f       	mov	r28, r24
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	8a e0       	ldi	r24, 0x0A	; 10
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 2e0:	8c 2f       	mov	r24, r28
 2e2:	0e 94 28 01 	call	0x250	; 0x250 <Lcd4_Port>
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	8b e0       	ldi	r24, 0x0B	; 11
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 2f2:	8f e9       	ldi	r24, 0x9F	; 159
 2f4:	9f e0       	ldi	r25, 0x0F	; 15
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <Lcd4_Cmd+0x26>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <Lcd4_Cmd+0x2c>
 2fc:	00 00       	nop
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	8b e0       	ldi	r24, 0x0B	; 11
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 30a:	8f e9       	ldi	r24, 0x9F	; 159
 30c:	9f e0       	ldi	r25, 0x0F	; 15
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <Lcd4_Cmd+0x3e>
 312:	00 c0       	rjmp	.+0      	; 0x314 <Lcd4_Cmd+0x44>
 314:	00 00       	nop
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <Lcd4_Clear>:
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 326:	08 95       	ret

00000328 <Lcd4_Init>:
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 28 01 	call	0x250	; 0x250 <Lcd4_Port>
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	89 ef       	ldi	r24, 0xF9	; 249
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <Lcd4_Init+0xc>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <Lcd4_Init+0x16>
 33e:	00 00       	nop
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 346:	8f e1       	ldi	r24, 0x1F	; 31
 348:	9e e4       	ldi	r25, 0x4E	; 78
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <Lcd4_Init+0x22>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <Lcd4_Init+0x28>
 350:	00 00       	nop
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 358:	8f ed       	ldi	r24, 0xDF	; 223
 35a:	9b ea       	ldi	r25, 0xAB	; 171
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <Lcd4_Init+0x34>
 360:	00 c0       	rjmp	.+0      	; 0x362 <Lcd4_Init+0x3a>
 362:	00 00       	nop
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 376:	88 e0       	ldi	r24, 0x08	; 8
 378:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 382:	8c e0       	ldi	r24, 0x0C	; 12
 384:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 38e:	86 e0       	ldi	r24, 0x06	; 6
 390:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lcd4_Cmd>
 394:	08 95       	ret

00000396 <Lcd4_Write_Char>:
 396:	cf 93       	push	r28
 398:	c8 2f       	mov	r28, r24
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	8a e0       	ldi	r24, 0x0A	; 10
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 3a6:	8c 2f       	mov	r24, r28
 3a8:	82 95       	swap	r24
 3aa:	8f 70       	andi	r24, 0x0F	; 15
 3ac:	0e 94 28 01 	call	0x250	; 0x250 <Lcd4_Port>
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	8b e0       	ldi	r24, 0x0B	; 11
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 3bc:	8f e9       	ldi	r24, 0x9F	; 159
 3be:	9f e0       	ldi	r25, 0x0F	; 15
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <Lcd4_Write_Char+0x2a>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <Lcd4_Write_Char+0x30>
 3c6:	00 00       	nop
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	8b e0       	ldi	r24, 0x0B	; 11
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 3d4:	8f e9       	ldi	r24, 0x9F	; 159
 3d6:	9f e0       	ldi	r25, 0x0F	; 15
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <Lcd4_Write_Char+0x42>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <Lcd4_Write_Char+0x48>
 3de:	00 00       	nop
 3e0:	8c 2f       	mov	r24, r28
 3e2:	8f 70       	andi	r24, 0x0F	; 15
 3e4:	0e 94 28 01 	call	0x250	; 0x250 <Lcd4_Port>
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	8b e0       	ldi	r24, 0x0B	; 11
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 3f4:	8f e9       	ldi	r24, 0x9F	; 159
 3f6:	9f e0       	ldi	r25, 0x0F	; 15
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <Lcd4_Write_Char+0x62>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <Lcd4_Write_Char+0x68>
 3fe:	00 00       	nop
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	8b e0       	ldi	r24, 0x0B	; 11
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 40 00 	call	0x80	; 0x80 <pinChange>
 40c:	8f e9       	ldi	r24, 0x9F	; 159
 40e:	9f e0       	ldi	r25, 0x0F	; 15
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <USART_send>:
#include "lcd.h"
#include <util/delay.h>
#include <string.h>

void USART_send(unsigned char data){
	while(!(UCSR0A&(1<<UDRE0)));  // check if data is sent
 41c:	e0 ec       	ldi	r30, 0xC0	; 192
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	90 81       	ld	r25, Z
 422:	95 ff       	sbrs	r25, 5
 424:	fd cf       	rjmp	.-6      	; 0x420 <USART_send+0x4>
	UDR0= data;
 426:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 42a:	08 95       	ret

0000042c <USART_putstring>:
}


void USART_putstring(unsigned char* fullstring){
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	ec 01       	movw	r28, r24
	
	while (*fullstring != 0x00)
 432:	88 81       	ld	r24, Y
 434:	88 23       	and	r24, r24
 436:	31 f0       	breq	.+12     	; 0x444 <USART_putstring+0x18>
 438:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_send(*fullstring ++);
 43a:	0e 94 0e 02 	call	0x41c	; 0x41c <USART_send>
}


void USART_putstring(unsigned char* fullstring){
	
	while (*fullstring != 0x00)
 43e:	89 91       	ld	r24, Y+
 440:	81 11       	cpse	r24, r1
 442:	fb cf       	rjmp	.-10     	; 0x43a <USART_putstring+0xe>
	{
		USART_send(*fullstring ++);
	}
}
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <USART_init>:

void USART_init(void){
	UBRR0H=(uint8_t)(BAUD_PRESCALLER>>8); //set baud rate
 44a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L=(uint8_t)(BAUD_PRESCALLER);
 44e:	87 e6       	ldi	r24, 0x67	; 103
 450:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B=(1<<RXEN0)|(1<<TXEN0);//enable transmit
 454:	88 e1       	ldi	r24, 0x18	; 24
 456:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C=(3<<UCSZ00);//set 8-bit (default)
 45a:	86 e0       	ldi	r24, 0x06	; 6
 45c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 460:	08 95       	ret

00000462 <USART_receive>:
}

unsigned char USART_receive(void){
	while(!(UCSR0A&(1<<RXC0)));  // Wait to receive data
 462:	e0 ec       	ldi	r30, 0xC0	; 192
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	88 23       	and	r24, r24
 46a:	ec f7       	brge	.-6      	; 0x466 <USART_receive+0x4>
	return UDR0;// Read data from UDR
 46c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 470:	08 95       	ret

00000472 <USART_getstring>:


	
int  USART_getstring(unsigned char *phrase){
 472:	ef 92       	push	r14
 474:	ff 92       	push	r15
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	7c 01       	movw	r14, r24
	
	char c = USART_receive();
 480:	0e 94 31 02 	call	0x462	; 0x462 <USART_receive>
	int j =0;
	
	while(c != '\n'){
 484:	8a 30       	cpi	r24, 0x0A	; 10
 486:	61 f0       	breq	.+24     	; 0x4a0 <USART_getstring+0x2e>
 488:	87 01       	movw	r16, r14
 48a:	c0 e0       	ldi	r28, 0x00	; 0
 48c:	d0 e0       	ldi	r29, 0x00	; 0
		phrase[j] = c;
 48e:	f8 01       	movw	r30, r16
 490:	81 93       	st	Z+, r24
 492:	8f 01       	movw	r16, r30
		j++;
 494:	21 96       	adiw	r28, 0x01	; 1
		c = USART_receive();
 496:	0e 94 31 02 	call	0x462	; 0x462 <USART_receive>
int  USART_getstring(unsigned char *phrase){
	
	char c = USART_receive();
	int j =0;
	
	while(c != '\n'){
 49a:	8a 30       	cpi	r24, 0x0A	; 10
 49c:	c1 f7       	brne	.-16     	; 0x48e <USART_getstring+0x1c>
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <USART_getstring+0x32>

	
int  USART_getstring(unsigned char *phrase){
	
	char c = USART_receive();
	int j =0;
 4a0:	c0 e0       	ldi	r28, 0x00	; 0
 4a2:	d0 e0       	ldi	r29, 0x00	; 0
	while(c != '\n'){
		phrase[j] = c;
		j++;
		c = USART_receive();
	}
	phrase[j] = 0;
 4a4:	f7 01       	movw	r30, r14
 4a6:	ec 0f       	add	r30, r28
 4a8:	fd 1f       	adc	r31, r29
 4aa:	10 82       	st	Z, r1

	return j+1;
}
 4ac:	ce 01       	movw	r24, r28
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	08 95       	ret

000004be <main>:



int main(void){
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	a8 97       	sbiw	r28, 0x28	; 40
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	de bf       	out	0x3e, r29	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	cd bf       	out	0x3d, r28	; 61
	USART_init();
 4d2:	0e 94 25 02 	call	0x44a	; 0x44a <USART_init>

	int i = 3;
	DDRD=0xFF;
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	8a b9       	out	0x0a, r24	; 10
	DDRB=0xFF;
 4da:	84 b9       	out	0x04, r24	; 4
	unsigned char string [40] = "owo";
 4dc:	8f e6       	ldi	r24, 0x6F	; 111
 4de:	97 e7       	ldi	r25, 0x77	; 119
 4e0:	9a 83       	std	Y+2, r25	; 0x02
 4e2:	89 83       	std	Y+1, r24	; 0x01
 4e4:	8f e6       	ldi	r24, 0x6F	; 111
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	9c 83       	std	Y+4, r25	; 0x04
 4ea:	8b 83       	std	Y+3, r24	; 0x03
 4ec:	fe 01       	movw	r30, r28
 4ee:	35 96       	adiw	r30, 0x05	; 5
 4f0:	84 e2       	ldi	r24, 0x24	; 36
 4f2:	df 01       	movw	r26, r30
 4f4:	1d 92       	st	X+, r1
 4f6:	8a 95       	dec	r24
 4f8:	e9 f7       	brne	.-6      	; 0x4f4 <main+0x36>
	string[0] = 'o';
 4fa:	8f e6       	ldi	r24, 0x6F	; 111
 4fc:	89 83       	std	Y+1, r24	; 0x01
	Lcd4_Init();
 4fe:	0e 94 94 01 	call	0x328	; 0x328 <Lcd4_Init>
	Lcd4_Clear();
 502:	0e 94 8d 01 	call	0x31a	; 0x31a <Lcd4_Clear>
		
		
		
		
		
				if ((UCSR0A&(1<<RXC0))){
 506:	0f 2e       	mov	r0, r31
 508:	f0 ec       	ldi	r31, 0xC0	; 192
 50a:	cf 2e       	mov	r12, r31
 50c:	d1 2c       	mov	r13, r1
 50e:	f0 2d       	mov	r31, r0
 510:	f6 01       	movw	r30, r12
 512:	80 81       	ld	r24, Z
 514:	88 23       	and	r24, r24
 516:	e4 f7       	brge	.-8      	; 0x510 <main+0x52>
					
					
					i = USART_getstring(string);
 518:	ce 01       	movw	r24, r28
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	0e 94 39 02 	call	0x472	; 0x472 <USART_getstring>
 520:	7c 01       	movw	r14, r24
					USART_putstring(string);
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	0e 94 16 02 	call	0x42c	; 0x42c <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52a:	ff ef       	ldi	r31, 0xFF	; 255
 52c:	23 ed       	ldi	r18, 0xD3	; 211
 52e:	30 e3       	ldi	r19, 0x30	; 48
 530:	f1 50       	subi	r31, 0x01	; 1
 532:	20 40       	sbci	r18, 0x00	; 0
 534:	30 40       	sbci	r19, 0x00	; 0
 536:	e1 f7       	brne	.-8      	; 0x530 <main+0x72>
 538:	00 c0       	rjmp	.+0      	; 0x53a <main+0x7c>
 53a:	00 00       	nop
					_delay_ms(1000);
					for(int j = 0 ; j < i-1; j ++){
 53c:	c7 01       	movw	r24, r14
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	18 16       	cp	r1, r24
 542:	19 06       	cpc	r1, r25
 544:	6c f4       	brge	.+26     	; 0x560 <main+0xa2>
 546:	8e 01       	movw	r16, r28
 548:	0f 5f       	subi	r16, 0xFF	; 255
 54a:	1f 4f       	sbci	r17, 0xFF	; 255
 54c:	ec 0e       	add	r14, r28
 54e:	fd 1e       	adc	r15, r29
						Lcd4_Write_Char(string[j]);
 550:	d8 01       	movw	r26, r16
 552:	8d 91       	ld	r24, X+
 554:	8d 01       	movw	r16, r26
 556:	0e 94 cb 01 	call	0x396	; 0x396 <Lcd4_Write_Char>
					
					
					i = USART_getstring(string);
					USART_putstring(string);
					_delay_ms(1000);
					for(int j = 0 ; j < i-1; j ++){
 55a:	0e 15       	cp	r16, r14
 55c:	1f 05       	cpc	r17, r15
 55e:	c1 f7       	brne	.-16     	; 0x550 <main+0x92>
 560:	ba ea       	ldi	r27, 0xAA	; 170
 562:	ea e9       	ldi	r30, 0x9A	; 154
 564:	fb e5       	ldi	r31, 0x5B	; 91
 566:	26 e0       	ldi	r18, 0x06	; 6
 568:	b1 50       	subi	r27, 0x01	; 1
 56a:	e0 40       	sbci	r30, 0x00	; 0
 56c:	f0 40       	sbci	r31, 0x00	; 0
 56e:	20 40       	sbci	r18, 0x00	; 0
 570:	d9 f7       	brne	.-10     	; 0x568 <main+0xaa>
 572:	00 00       	nop
						Lcd4_Write_Char(string[j]);
						//
					}
					_delay_ms(40000);
					Lcd4_Clear();
 574:	0e 94 8d 01 	call	0x31a	; 0x31a <Lcd4_Clear>
 578:	cb cf       	rjmp	.-106    	; 0x510 <main+0x52>

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
