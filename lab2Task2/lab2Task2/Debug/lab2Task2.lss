
lab2Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c4  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069d  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037c  00000000  00000000  00001125  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b7  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f4  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001a73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	
	ADMUX|=(1<<REFS0);//|(1<<MUX0);//reference voltage on AVCC, and use ADC1
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADPS1)|(1<<ADPS0);//ADC clock prescaler/ 8
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	83 60       	ori	r24, 0x03	; 3
  92:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN);//enables the ADC
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
	
	int PWM = 0;
	int PWMPot = 0;
	int PWMPotMeasured = 0;
	
	 DDRB = 0b11;
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	84 b9       	out	0x04, r24	; 4
	 DDRC = 0x00;
  9e:	17 b8       	out	0x07, r1	; 7
	 PORTB = 0b01; 
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	85 b9       	out	0x05, r24	; 5
	 PORTD=0x08;//OCR0A PWM, set PortD.6 output
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	8b b9       	out	0x0b, r24	; 11
	 DDRD|=(1<<6);//set OCR0A PWM, fast PWM, no prescaler, non-inverted
  a8:	56 9a       	sbi	0x0a, 6	; 10
 
	 TCCR0A=0x83;
  aa:	83 e8       	ldi	r24, 0x83	; 131
  ac:	84 bd       	out	0x24, r24	; 36
	ADMUX|=(1<<REFS0);//|(1<<MUX0);//reference voltage on AVCC, and use ADC1
	ADCSRA|=(1<<ADPS1)|(1<<ADPS0);//ADC clock prescaler/ 8
	ADCSRA|=(1<<ADEN);//enables the ADC
	
	int PWM = 0;
	int PWMPot = 0;
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
	
	ADMUX|=(1<<REFS0);//|(1<<MUX0);//reference voltage on AVCC, and use ADC1
	ADCSRA|=(1<<ADPS1)|(1<<ADPS0);//ADC clock prescaler/ 8
	ADCSRA|=(1<<ADEN);//enables the ADC
	
	int PWM = 0;
  b2:	10 e0       	ldi	r17, 0x00	; 0
	{
		
		ADCSRA|=(1<<ADSC);//start ADC conversion
		while((ADCSRA&(1<<ADSC)))//wait until ADSC bit is clear, i.e., ADC conversion is done
		{} //read ADC value in
		uint8_t theLowADC=ADCL;
  b4:	c8 e7       	ldi	r28, 0x78	; 120
  b6:	d0 e0       	ldi	r29, 0x00	; 0
		PWMPotMeasured=ADCH << 8|theLowADC;
  b8:	a9 e7       	ldi	r26, 0x79	; 121
  ba:	b0 e0       	ldi	r27, 0x00	; 0
			}
			
			
			
			OCR0A = PWM;
			TCCR0B=0b101;
  bc:	05 e0       	ldi	r16, 0x05	; 5

			{

				switch(i){
					case 1:
						PORTB ^= 0b11;
  be:	0f 2e       	mov	r0, r31
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	cf 2e       	mov	r12, r31
  c4:	f0 2d       	mov	r31, r0
															
					break;
					case 3:
					//0
					//0
					PWM=0x00;
  c6:	d1 2c       	mov	r13, r1

			}
			
			
			
			OCR0A = PWM;
  c8:	0f 2e       	mov	r0, r31
  ca:	ff e9       	ldi	r31, 0x9F	; 159
  cc:	ff 2e       	mov	r15, r31
  ce:	f0 2d       	mov	r31, r0
										
					break;
					case 2:
					//87.5
					//223 - df
					PWM=0xdf;
  d0:	0f 2e       	mov	r0, r31
  d2:	ff ed       	ldi	r31, 0xDF	; 223
  d4:	ef 2e       	mov	r14, r31
  d6:	f0 2d       	mov	r31, r0

	while (1) //initialize while loop

	{
		
		ADCSRA|=(1<<ADSC);//start ADC conversion
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADSC)))//wait until ADSC bit is clear, i.e., ADC conversion is done
  de:	80 81       	ld	r24, Z
  e0:	86 fd       	sbrc	r24, 6
  e2:	fd cf       	rjmp	.-6      	; 0xde <main+0x5e>
		{} //read ADC value in
		uint8_t theLowADC=ADCL;
  e4:	68 81       	ld	r22, Y
		PWMPotMeasured=ADCH << 8|theLowADC;
  e6:	8c 91       	ld	r24, X
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	78 2b       	or	r23, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x70>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x76>
  f6:	00 00       	nop
		//read pot and set it to PWMPotMeasured
		_delay_ms(10);
		if (PWMPot != PWMPotMeasured)
  f8:	26 17       	cp	r18, r22
  fa:	37 07       	cpc	r19, r23
  fc:	19 f1       	breq	.+70     	; 0x144 <main+0xc4>
  fe:	8f e3       	ldi	r24, 0x3F	; 63
 100:	9c e9       	ldi	r25, 0x9C	; 156
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x82>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x88>
 108:	00 00       	nop
		{
			_delay_ms(10);
					if (PWMPot > PWMPotMeasured+10 || PWMPot < PWMPotMeasured-10)
 10a:	cb 01       	movw	r24, r22
 10c:	0a 96       	adiw	r24, 0x0a	; 10
 10e:	82 17       	cp	r24, r18
 110:	93 07       	cpc	r25, r19
 112:	24 f0       	brlt	.+8      	; 0x11c <main+0x9c>
 114:	44 97       	sbiw	r24, 0x14	; 20
 116:	28 17       	cp	r18, r24
 118:	39 07       	cpc	r19, r25
 11a:	9c f4       	brge	.+38     	; 0x142 <main+0xc2>
					{
					PWM = (PWMPotMeasured%1024)/4;;
 11c:	9b 01       	movw	r18, r22
 11e:	33 78       	andi	r19, 0x83	; 131
 120:	33 23       	and	r19, r19
 122:	2c f4       	brge	.+10     	; 0x12e <main+0xae>
 124:	21 50       	subi	r18, 0x01	; 1
 126:	31 09       	sbc	r19, r1
 128:	3c 6f       	ori	r19, 0xFC	; 252
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	c9 01       	movw	r24, r18
 130:	99 23       	and	r25, r25
 132:	0c f4       	brge	.+2      	; 0x136 <main+0xb6>
 134:	03 96       	adiw	r24, 0x03	; 3
 136:	95 95       	asr	r25
 138:	87 95       	ror	r24
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	18 2f       	mov	r17, r24
 140:	01 c0       	rjmp	.+2      	; 0x144 <main+0xc4>
 142:	b9 01       	movw	r22, r18
 144:	42 e0       	ldi	r20, 0x02	; 2
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <main+0xce>
 14a:	4f 5f       	subi	r20, 0xFF	; 255
 14c:	5f 4f       	sbci	r21, 0xFF	; 255
 14e:	9a 01       	movw	r18, r20
 150:	21 50       	subi	r18, 0x01	; 1
 152:	31 09       	sbc	r19, r1
		
		
		for (int i = 1; i <6; i++)
		{
			
			if(PINC & (1<<i) ) //if PIN5 of port C is high
 154:	86 b1       	in	r24, 0x06	; 6
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 2e       	mov	r0, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <main+0xe0>
 15c:	95 95       	asr	r25
 15e:	87 95       	ror	r24
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <main+0xdc>
 164:	80 ff       	sbrs	r24, 0
 166:	06 c0       	rjmp	.+12     	; 0x174 <main+0xf4>
 168:	8f e3       	ldi	r24, 0x3F	; 63
 16a:	9c e9       	ldi	r25, 0x9C	; 156
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0xec>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0xf2>
 172:	00 00       	nop

			{
				_delay_ms(10);
			}
			if(PINC & (1<<i) ) //if PIN5 of port C is high
 174:	86 b1       	in	r24, 0x06	; 6
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 2e       	mov	r0, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <main+0x100>
 17c:	95 95       	asr	r25
 17e:	87 95       	ror	r24
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <main+0xfc>
 184:	80 ff       	sbrs	r24, 0
 186:	1b c0       	rjmp	.+54     	; 0x1be <main+0x13e>

			{

				switch(i){
 188:	23 30       	cpi	r18, 0x03	; 3
 18a:	31 05       	cpc	r19, r1
 18c:	a9 f0       	breq	.+42     	; 0x1b8 <main+0x138>
 18e:	38 f4       	brcc	.+14     	; 0x19e <main+0x11e>
 190:	21 30       	cpi	r18, 0x01	; 1
 192:	31 05       	cpc	r19, r1
 194:	69 f0       	breq	.+26     	; 0x1b0 <main+0x130>
 196:	22 30       	cpi	r18, 0x02	; 2
 198:	31 05       	cpc	r19, r1
 19a:	c1 f0       	breq	.+48     	; 0x1cc <main+0x14c>
 19c:	10 c0       	rjmp	.+32     	; 0x1be <main+0x13e>
 19e:	24 30       	cpi	r18, 0x04	; 4
 1a0:	31 05       	cpc	r19, r1
 1a2:	21 f0       	breq	.+8      	; 0x1ac <main+0x12c>
 1a4:	25 30       	cpi	r18, 0x05	; 5
 1a6:	31 05       	cpc	r19, r1
 1a8:	a9 f0       	breq	.+42     	; 0x1d4 <main+0x154>
 1aa:	09 c0       	rjmp	.+18     	; 0x1be <main+0x13e>
					break;
					
					case 4:
					//25
					//63 -3f
					PWM=0x3f;
 1ac:	1f e3       	ldi	r17, 0x3F	; 63
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <main+0x14e>

			{

				switch(i){
					case 1:
						PORTB ^= 0b11;
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	8c 25       	eor	r24, r12
 1b4:	85 b9       	out	0x05, r24	; 5
										
					break;
 1b6:	0b c0       	rjmp	.+22     	; 0x1ce <main+0x14e>
					break;
					case 3:
					//0
					//0
					PWM=0x00;
					PORTB |= (1<<5);
 1b8:	2d 9a       	sbi	0x05, 5	; 5
															
					break;
					case 3:
					//0
					//0
					PWM=0x00;
 1ba:	1d 2d       	mov	r17, r13
					PORTB |= (1<<5);
					break;
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <main+0x14e>

			}
			
			
			
			OCR0A = PWM;
 1be:	17 bd       	out	0x27, r17	; 39
			TCCR0B=0b101;
 1c0:	05 bd       	out	0x25, r16	; 37
					PWMPot = PWMPotMeasured;
					}
		}
		
		
		for (int i = 1; i <6; i++)
 1c2:	46 30       	cpi	r20, 0x06	; 6
 1c4:	51 05       	cpc	r21, r1
 1c6:	0c f2       	brlt	.-126    	; 0x14a <main+0xca>
	
	ADMUX|=(1<<REFS0);//|(1<<MUX0);//reference voltage on AVCC, and use ADC1
	ADCSRA|=(1<<ADPS1)|(1<<ADPS0);//ADC clock prescaler/ 8
	ADCSRA|=(1<<ADEN);//enables the ADC
	
	int PWM = 0;
 1c8:	9b 01       	movw	r18, r22
 1ca:	86 cf       	rjmp	.-244    	; 0xd8 <main+0x58>
										
					break;
					case 2:
					//87.5
					//223 - df
					PWM=0xdf;
 1cc:	1e 2d       	mov	r17, r14

			}
			
			
			
			OCR0A = PWM;
 1ce:	17 bd       	out	0x27, r17	; 39
			TCCR0B=0b101;
 1d0:	05 bd       	out	0x25, r16	; 37
 1d2:	bb cf       	rjmp	.-138    	; 0x14a <main+0xca>

			}
			
			
			
			OCR0A = PWM;
 1d4:	f7 bc       	out	0x27, r15	; 39
			TCCR0B=0b101;
 1d6:	05 bd       	out	0x25, r16	; 37
					break;
					
					case 5:
					//62.5
					//159 - 9f
					PWM=0x9f;
 1d8:	1f 2d       	mov	r17, r15
 1da:	f6 cf       	rjmp	.-20     	; 0x1c8 <main+0x148>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
