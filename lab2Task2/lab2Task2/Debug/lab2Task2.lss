
lab2Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000714  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f2  00000000  00000000  00000f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	
	DDRB = 0b11;
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b01; 
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	85 b9       	out	0x05, r24	; 5
 DDRD|=(1<<2)|(1<<3);
  88:	8a b1       	in	r24, 0x0a	; 10
  8a:	8c 60       	ori	r24, 0x0C	; 12
  8c:	8a b9       	out	0x0a, r24	; 10
 PORTD=0x08;//OCR0A PWM, set PortD.6 output
  8e:	88 e0       	ldi	r24, 0x08	; 8
  90:	8b b9       	out	0x0b, r24	; 11
 DDRD|=(1<<6);//set OCR0A PWM, fast PWM, no prescaler, non-inverted
  92:	56 9a       	sbi	0x0a, 6	; 10
 
 TCCR0A=0x83;
  94:	83 e8       	ldi	r24, 0x83	; 131
  96:	84 bd       	out	0x24, r24	; 36

	DDRB |= ( 1<<5) ; //Make pin 4 of port D as a output
  98:	25 9a       	sbi	0x04, 5	; 4

	DDRC = 0x00; // Make pin 5 of port C as a input
  9a:	17 b8       	out	0x07, r1	; 7
					//62.5
					//159 - 9f
					OCR0A=0x9f;
					break;
				}
				TCCR0B=0b101;
  9c:	45 e0       	ldi	r20, 0x05	; 5
					break;
					
					case 4:
					//25
					//63 -3f
					OCR0A=0x3f;
  9e:	ef e3       	ldi	r30, 0x3F	; 63
					break;
					
					case 5:
					//62.5
					//159 - 9f
					OCR0A=0x9f;
  a0:	7f e9       	ldi	r23, 0x9F	; 159

			{

				switch(i){
					case 1:
						PORTB ^= 0b11;
  a2:	63 e0       	ldi	r22, 0x03	; 3
										
					break;
					case 2:
					//87.5
					//223 - df
					OCR0A=0xdf;
  a4:	5f ed       	ldi	r21, 0xDF	; 223

	while (1) //initialize while loop

	{
		
		for (int i = 1; i <6; i++)
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
		{
			
			if(PINC & (1<<i) ) //if PIN5 of port C is high
  aa:	26 b1       	in	r18, 0x06	; 6
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	08 2e       	mov	r0, r24
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x36>
  b2:	35 95       	asr	r19
  b4:	27 95       	ror	r18
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <main+0x32>
  ba:	20 ff       	sbrs	r18, 0
  bc:	06 c0       	rjmp	.+12     	; 0xca <main+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	af e3       	ldi	r26, 0x3F	; 63
  c0:	bc e9       	ldi	r27, 0x9C	; 156
  c2:	11 97       	sbiw	r26, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x42>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
  c8:	00 00       	nop

			{
				_delay_ms(10);
			}
			if(PINC & (1<<i) ) //if PIN5 of port C is high
  ca:	26 b1       	in	r18, 0x06	; 6
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	08 2e       	mov	r0, r24
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <main+0x56>
  d2:	35 95       	asr	r19
  d4:	27 95       	ror	r18
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <main+0x52>
  da:	20 ff       	sbrs	r18, 0
  dc:	1f c0       	rjmp	.+62     	; 0x11c <main+0x9c>

			{

				switch(i){
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	a9 f0       	breq	.+42     	; 0x10e <main+0x8e>
  e4:	3c f4       	brge	.+14     	; 0xf4 <main+0x74>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	91 05       	cpc	r25, r1
  ea:	59 f0       	breq	.+22     	; 0x102 <main+0x82>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	91 05       	cpc	r25, r1
  f0:	61 f0       	breq	.+24     	; 0x10a <main+0x8a>
  f2:	13 c0       	rjmp	.+38     	; 0x11a <main+0x9a>
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	69 f0       	breq	.+26     	; 0x114 <main+0x94>
  fa:	85 30       	cpi	r24, 0x05	; 5
  fc:	91 05       	cpc	r25, r1
  fe:	61 f0       	breq	.+24     	; 0x118 <main+0x98>
 100:	0c c0       	rjmp	.+24     	; 0x11a <main+0x9a>
					case 1:
						PORTB ^= 0b11;
 102:	25 b1       	in	r18, 0x05	; 5
 104:	26 27       	eor	r18, r22
 106:	25 b9       	out	0x05, r18	; 5
										
					break;
 108:	08 c0       	rjmp	.+16     	; 0x11a <main+0x9a>
					case 2:
					//87.5
					//223 - df
					OCR0A=0xdf;
 10a:	57 bd       	out	0x27, r21	; 39
															
					break;
 10c:	06 c0       	rjmp	.+12     	; 0x11a <main+0x9a>
					case 3:
					//0
					//0
					OCR0A=0x00;
 10e:	17 bc       	out	0x27, r1	; 39
					PORTB |= (1<<5);
 110:	2d 9a       	sbi	0x05, 5	; 5
					break;
 112:	03 c0       	rjmp	.+6      	; 0x11a <main+0x9a>
					
					case 4:
					//25
					//63 -3f
					OCR0A=0x3f;
 114:	e7 bd       	out	0x27, r30	; 39
					break;
 116:	01 c0       	rjmp	.+2      	; 0x11a <main+0x9a>
					
					case 5:
					//62.5
					//159 - 9f
					OCR0A=0x9f;
 118:	77 bd       	out	0x27, r23	; 39
					break;
				}
				TCCR0B=0b101;
 11a:	45 bd       	out	0x25, r20	; 37

	while (1) //initialize while loop

	{
		
		for (int i = 1; i <6; i++)
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	86 30       	cpi	r24, 0x06	; 6
 120:	91 05       	cpc	r25, r1
 122:	19 f6       	brne	.-122    	; 0xaa <main+0x2a>
 124:	c0 cf       	rjmp	.-128    	; 0xa6 <main+0x26>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
